----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2022-01-25T13:16:22.916448+00:00"
from:
  id-type: crev
  id: V3TaCeEHCBYU4JzvD2As35lcTh9QACxrShzoNjn9WE4
  url: "https://github.com/Gaelan/crev-proofs"
package:
  source: "https://crates.io"
  name: vec_map
  version: 0.8.2
  revision: 9509befa7bc96a7f8bd202cc472dc9ecc23be890
  digest: EkbG3E-9EGd-zkuTEY-7KwtPtrqOR9vRGzZoAKxa5DY
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  TL;DR: Seems safe to use, but I'd avoid its serde and DoubleEndedIterator
  implementations for now.
  
  Identical to 0.8.1 (which dpc approved), except that an unnecessary (but
  harmless) shell script was removed from the crates.io upload, and line endings
  were changed from CRLF to LF.
  
  The crate provides a VecMap data structure - just a Vec<Option<T>> that
  provides a map-like interface (it also tracks the number of values present
  for efficient len()). This has its obvious risks (maps with sparse
  keys or a single very high key waste tons of memory), but could be useful
  in some cases.
  
  No unsafe or other glaring issues. Looks to have reasonable testing.
  
  In maintainance mode, but this crate is probably "done" enough that it isn't
  a huge issue.
  
  Some notes and nitpicks:
  
  - VecMap has a capacity() method (and other methods along those lines) that
    access the capacity of the underlying Vec. This is a little confusing, as
    the capacity of the Vec in this case isn't "the maximum number of values
    that can be stored without realocating", as it it usually is, but "the
    highest individual key that can be stored as reallocating". It's decently
    well documented, though, and these are just normal methods with similar
    names, not trait methods, so no contracts are getting violated.
  - get() and friends could be written to be panic-free by construction
    instead of with an explicit bounds check, but they're panic-free in any
    case
  - The DoubleEndedIterator implementations don't adjust self.yielded.
    Unless I'm missing something, this means size_hint() is broken after
    next_back() is called.
  - I'm not sure about the serde implementation - it just derives the traits,
    resulting in a map being serialized as (using JSON here for demonstration)
    `{"n":2,"v":[null,null,null,null,null,6,null,8]}`. Surely it'd be better
    to serialize as a native map, e.g. `{"5": 6, "7": 8}`?
----- SIGN CREV PROOF -----
w2ILE2JF4pNskxu3CmSsndqZ76fB6aZ-MZhYROAcI_E3BdnEdXjiZwhxbVXCVMy1ZQYncDS_-pJ0QXBWgPkdDA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2022-01-25T14:14:02.296446+00:00"
from:
  id-type: crev
  id: V3TaCeEHCBYU4JzvD2As35lcTh9QACxrShzoNjn9WE4
  url: "https://github.com/Gaelan/crev-proofs"
package:
  source: "https://crates.io"
  name: unic-common
  version: 0.9.0
  revision: 5878605364af97a3358368a6eaef02104af2e016
  digest: XpCscePQOyvzLUvE3BOkX0dcymQg-tz1cgHTFWd7ISg
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  Extremely simple crate. Defines a struct to represent a Unicode version
  (three u16s) and, behind the "unstable" feature flag, code to convert from
  the equivalent struct in std (which isn't actually unstable these days).
----- SIGN CREV PROOF -----
jQ5FmMOHoSLwLAW1kHtxeAeALNMqnpOmCWmOgXoiVk3aTxbx2WxQFf8o_xTgYDp-IwgEqvD2g_TUhkCpC7zXCQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2022-01-29T17:55:16.514933+00:00"
from:
  id-type: crev
  id: V3TaCeEHCBYU4JzvD2As35lcTh9QACxrShzoNjn9WE4
  url: "https://github.com/Gaelan/crev-proofs"
package:
  source: "https://crates.io"
  name: crates_io_api
  version: 0.7.3
  revision: 4bff104c7cb61dbf4b893507f0ded382f4133aec
  digest: 4pSnfRHFi_-VVTNv5F7jkQPsSfxG5038meeU7TLVfYA
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  Wrapper around the crates.io API, using reqwest as the underlying HTTP client.
  Seems reasonable and well maintained. No unsafe.
  
  Tries to be a polite client (rate limiting, etc) by default, which is nice to
  see.
  
  I haven't tested this, or verified that the JSON structures it uses are
  correct.
  
  Notes from code review:
  - AsyncClient::new() panics if reqwest's initialization fails. This is
    probably fine (some reqwest APIs panic in the same case), but given that
    we're returning a Result anyway it seems sensible to pass it through.
    Worth documenting, at the very least.
  - Somewhat subtly, the lock on AsyncClient::last_request_time is used to
    prevent multiple requests from firing at once. That deserves a comment.
  - Bug with contrived invalid crate names:
    https://github.com/theduke/crates-io-api/issues/44
  - crate_reverse_dependencies() (actually its helper, ReverseDependencies::
    from_recieved()) makes a copy of the Version struct for each reverse dep,
    which is less than ideal for memory usage, especially if getting the rdeps
    of a popular crate.
  - full_crate() is similiarly likely to be a bad idea, as it calls
    crate_reverse_dependencies() and also (optionally) makes two requests per
    crate version. Maybe has its uses, though.
  - Several methods (crate_reverse_dependencies(), full_crate(), all_crates(),
    all_crates_full()) request all pages of a paginated list. This will, in
    many cases, involve tens to hundreds of requests. Everything's rate
    limited, so it won't hurt anything (other than taking a long time to
    return), but I can't think of many cases where calling these methods is a
    good idea. At least the docs are mostly clear about this.
    - all_crates() and all_crates_full() at least returns a streams, do you 
      can deal with their output incrementally.
  - all_crates() uses floating point math with the total number of crates? That
    seems ill-advised.
  - The tests are a little weird - there are a few asserts, but mostly they
    just print out information, presumably for human review. Works as a smoke
    test, I guess.
  - The sync client duplicates all the code from the async client. There's an
    open issue about this. Interestingly, there's some inconsistency in
    handling of errors that should never happen (e.g. parse errors on a
    hardcoded URL) - the async client unwraps them, but the sync client passes
    them up.
  
  TL;DR should be safe to use; some methods are probably a bad idea unless you
  know what you're doing, but the docs make this clear.
----- SIGN CREV PROOF -----
Sro1qCqu_sHC0DuO7GsFwUql2Z3WWGHOSffm5xOnwqUubixsOutB1n0hUmXZjYzytOU3DxC768ggJarJTRUpBQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2022-01-29T17:57:49.634994+00:00"
from:
  id-type: crev
  id: V3TaCeEHCBYU4JzvD2As35lcTh9QACxrShzoNjn9WE4
  url: "https://github.com/Gaelan/crev-proofs"
package:
  source: "https://crates.io"
  name: crates_io_api
  version: 0.7.3
  revision: 4bff104c7cb61dbf4b893507f0ded382f4133aec
  digest: 4pSnfRHFi_-VVTNv5F7jkQPsSfxG5038meeU7TLVfYA
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  [update to correct thoroughness]
  
  Wrapper around the crates.io API, using reqwest as the underlying HTTP client.
  Seems reasonable and well maintained. No unsafe.
  
  Tries to be a polite client (rate limiting, etc) by default, which is nice to
  see.
  
  I haven't tested this, or verified that the JSON structures it uses are
  correct.
  
  Notes from code review:
  - AsyncClient::new() panics if reqwest's initialization fails. This is
    probably fine (some reqwest APIs panic in the same case), but given that
    we're returning a Result anyway it seems sensible to pass it through.
    Worth documenting, at the very least.
  - Somewhat subtly, the lock on AsyncClient::last_request_time is used to
    prevent multiple requests from firing at once. That deserves a comment.
  - Bug with contrived invalid crate names:
    https://github.com/theduke/crates-io-api/issues/44
  - crate_reverse_dependencies() (actually its helper, ReverseDependencies::
    from_recieved()) makes a copy of the Version struct for each reverse dep,
    which is less than ideal for memory usage, especially if getting the rdeps
    of a popular crate.
  - full_crate() is similiarly likely to be a bad idea, as it calls
    crate_reverse_dependencies() and also (optionally) makes two requests per
    crate version. Maybe has its uses, though.
  - Several methods (crate_reverse_dependencies(), full_crate(), all_crates(),
    all_crates_full()) request all pages of a paginated list. This will, in
    many cases, involve tens to hundreds of requests. Everything's rate
    limited, so it won't hurt anything (other than taking a long time to
    return), but I can't think of many cases where calling these methods is a
    good idea. At least the docs are mostly clear about this.
    - all_crates() and all_crates_full() at least returns a streams, do you 
      can deal with their output incrementally.
  - all_crates() uses floating point math with the total number of crates? That
    seems ill-advised.
  - The tests are a little weird - there are a few asserts, but mostly they
    just print out information, presumably for human review. Works as a smoke
    test, I guess.
  - The sync client duplicates all the code from the async client. There's an
    open issue about this. Interestingly, there's some inconsistency in
    handling of errors that should never happen (e.g. parse errors on a
    hardcoded URL) - the async client unwraps them, but the sync client passes
    them up.
  
  TL;DR should be safe to use; some methods are probably a bad idea unless you
  know what you're doing, but the docs make this clear.
----- SIGN CREV PROOF -----
UXGe7C1px-Shh7QmUZ5DbJsBpW-DhS2ob-nSbsIvWGrtsQfX3pGTktje30bluxA5UK0n0g99zcBW9rZbOXQMCw
----- END CREV PROOF -----

